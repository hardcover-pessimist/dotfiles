function confirm() {
  local prompt=$1
  local default_prompt="Are you sure"
    read -p "${prompt:-$default_prompt}? " -n 1 -r
    echo;
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        return 0
    else
        return 1
    fi
}

function _source_bashrc() {
  . "$HOME/.bashrc"
}

function _install_brew_packages() {
  if [[ uname == "Darwin" ]];then
    brew install -q git make unzip wget moreutils zip bash-completion binutils coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep openssh
    brew install -q --cask alacritty
  fi
  # Docker
  brew install -q \
    lazydocker \
    docker \
    docker-completion \
    docker-buildx
  # Terraform
  brew install -q \
    tflint \
    tfenv \
    terraform-docs
  # Python
  brew install -q \
    pyenv \
    poetry \
    pipx \
    pyenv \
    pipx \
    pyenv-virtualenv
  # Markdown
  brew install -q \
    glow \
    vale
  # AWS
  brew install -q \
    awscli \
    aws-sam-cli \
    aws-vault
  # Kubernetes
  brew install -q \
    kubectl
  # Vim
  brew install -q \
    fzf \
    neovim \
    ctags \
    ripgrep \
    fd \
    jsonlint \
    yaml-language-server \
    tree-sitter
  # TS/JS
  brew install -q \
    pnpm
  # Go
  brew install -q \
    goenv
  # Rust
  brew install -q \
    rustup
  # Ruby
  brew install -q \
    rbenv
  # Others
  brew install -q \
    gcc \
    moreutils \
    tmux \
    gh \
    spaceship \
    zsh \
    go-task \
    pre-commit
}

function _install_brew() {
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

function _install_deps() {
  if type apt 2>/dev/null;then
    sudo apt update
    sudo apt upgrade -y
    sudo apt-get remove -y --purge 'vim*'
    sudo apt install -y sudo build-essential curl git wget zip unzip bash-completion procps openssh-client locales
    if [[ "$WSL_DISTRO_NAME" == "Ubuntu" ]];then
      . /etc/os-release
      # Starting from Ubuntu 22.04 LTS, Ubuntu on WSL no longer bundled with wslu. Please install the PPA version.
      if [[ "$VERSION_ID" == "22.04" ]];then
        sudo apt install ubuntu-wsl -y
        sudo add-apt-repository ppa:wslutilities/wslu -y
        sudo apt update
        sudo apt install wslu -y
      fi

    elif [[ "$WSL_DISTRO_NAME" == "Debian" ]];then
      sudo apt install gnupg2 apt-transport-https -y
      wget -O - https://pkg.wslutiliti.es/public.key | sudo tee /etc/apt/trusted.gpg.d/wslu.asc
      echo "deb https://pkg.wslutiliti.es/debian $(. /etc/os-release && echo "$VERSION_CODENAME") main" | sudo tee /etc/apt/sources.list.d/wslu.list
      sudo apt update
      sudo apt install wslu -y
    fi
  elif [[ uname == "Darwin" ]];then
    xcode-select --install
  fi
}

function _install_nvm() {
  curl -s -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
  export NVM_DIR=~/.nvm
  [ -s $NVM_DIR/nvm.sh ] && . $NVM_DIR/nvm.sh  # This loads nvm
  [ -s $NVM_DIR/bash_completion ] && . $NVM_DIR/bash_completion  # This loads nvm bash_completion
  nvm install --lts --latest-npm
  source <(npm completion)
}

function _install_cspell() {
  echo Installing cspell
  npm install -g cspell
  if [ -L ~/.local/bin/cspell ];then
    rm -f ~/.local/bin/cspell
  fi
  ln -s $(which cspell) ~/.local/bin/cspell
}

function _install_aws_azure_login() {
  echo Installing aws-azure-login
  npm install -g aws-azure-login
  if [ -L ~/.local/bin/aws-azure-login ];then
    rm -f ~/.local/bin/aws-azure-login
  fi
  ln -s $(which aws-azure-login) ~/.local/bin/aws-azure-login
}

function _install_alacrity_support() {
  echo Installing Alacritty
  wget -q https://github.com/alacritty/alacritty/releases/latest/download/alacritty.bash -O $HOME/.local/share/bash-completion/alacritty.bash
  chmod +x $HOME/.local/share/bash-completion/alacritty.bash
  curl -s https://github.com/alacritty/alacritty/releases/latest/download/alacritty.info | sudo tic -xe alacritty,alacritty-direct -
  infocmp alacritty 2>&1 >/dev/null
}


function _configure_nvim() {
  echo Configuring NeoVim
  nvim +PlugInstall +qall
}

function _start_ssh_agent() {
  echo startup ssh agent
  /usr/bin/ssh-agent -s > ~/.agent;

}

function _configure_locale() {
  echo Generating locale
  bash -c 'sudo locale-gen $LANG'
}


function _install_nvshim() {
  pipx install git+https://github.com/iamogbz/nvshim.git
}

function _install_tmux_completions() {
  wget -O $HOME/.local/share/bash-completion/tmux.bash https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/tmux
  chmod +x $HOME/.local/share/bash-completion/tmux.bash
}


function _install_adr_tools() {
  if [[ ! -e ~/.local/src/adr-tools ]]; then
    git clone https://github.com/npryce/adr-tools.git \
      ~/.local/src/adr-tools
  fi
  git -C ~/.local/src/adr-tools pull
}


# Not in the install.sh
function _install_krew_df_pv() {
  curl https://krew.sh/df-pv | bash
}

function _install_bash_it() {
  if [[ ! -d ~/.bash_it ]];then
    git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
  fi
}
